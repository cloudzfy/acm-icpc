#include <iostream>
using namespace std;
#define Parent(i) ((i-1)/2)
#define Left(i)   (2*i+1)
#define Right(i)  (2*i+2)
int length=0;
void Max_Heapify(int A[],int i,int& H_Size){
	int l=Left(i),r=Right(i),largest;
	if(l<=H_Size && A[l]>A[i])
		largest=l;
	else largest=i;
	if(r<=H_Size && A[r]>A[largest])
		largest=r;
	if(largest!=i){
		int temp=A[i];
		A[i]=A[largest];
		A[largest]=temp;
		Max_Heapify(A,largest,H_Size);
	}
}
int Heap_Maximum(int A[]){
	return A[0];
}
int Heap_Extract_Max(int A[],int& H_Size){
	if(H_Size<1)
		return 1000000;
	int max=A[0];
	A[0]=A[H_Size-1];
	H_Size=H_Size-1;
	Max_Heapify(A,0,H_Size);
	return max;
}
void Heap_Increase_Key(int A[],int i,int key){
	if(key<A[i]) return;
	A[i]=key;
	while(i>0 && A[Parent(i)]<A[i]){
		int temp;
		temp=A[i];
		A[i]=A[Parent(i)];
		A[Parent(i)]=temp;
		i=Parent(i);
	}
}
void Max_Heap_Insert(int A[],int key,int& H_Size){
	H_Size++;
	A[H_Size-1]=-2000000000;
	Heap_Increase_Key(A,H_Size-1,key);
}

int M,N,c[30002],p[30002],i,j,value;
int main(){
	cin>>M>>N;
	for(i=1;i<=M;i++)
		cin>>c[i];
	p[0]=0;
	for(i=1;i<=N;i++)
		cin>>p[i];
	int a[30002],b[30002],AH_Size=0,BH_Size=0;
	for(i=1;i<=N;i++){
		for(j=p[i-1]+1;j<=p[i];j++){
			Max_Heap_Insert(a,c[j],AH_Size);
			
			if(AH_Size>i-1){
				value=-Heap_Extract_Max(a,AH_Size);
				
				Max_Heap_Insert(b,value,BH_Size);
			}
		}
		value=-Heap_Extract_Max(b,BH_Size);
		Max_Heap_Insert(a,value,AH_Size);
		cout<<Heap_Maximum(a)<<endl;
	}
	system("pause");
	return 0;
}
   